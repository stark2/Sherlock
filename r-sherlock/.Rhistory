colnames(data) <- c("D", "N1", "N2", "N3", "N4", "N5", "N6", "A1", "AVG", "SUM", "SSM", "SD")
head(data)
data$D <- as.Date(data$D, format="%Y-%m-%d")
s <- data[c("D", "A1", "SUM")]
s <- s[order(s$D),]
str(data)
plot(x = data$D, y = data$SUM, col=data$A1)
# ---------------------------------------------------------------------------------
df <- data[1:10,]
ggplot(df, aes(x = df$D, y = df$SUM)) +
geom_line(aes(y = df$SUM, col = "SUM"), pch = 19, size = 1, col = "steelblue", linetype = "dashed") +
geom_line(aes(y = df$SD, col = "SD"), pch = 19, size = 1, col = "dark green", linetype = "solid") +
geom_point(aes(y = df$SSM, col = "SSM"), pch = 19, size = 4, alpha = 0.75, col = "red", linetype = "dashed") +
geom_point(pch = 19, size = 4, alpha = 0.75, col = "steelblue")
ggplot(data=df, aes(x=D, y=SUM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
ggplot(data=df, aes(x=D, y=SSM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
# ---------------------------------------------------------------------------------
#boxplot(data$SUM ~ data$A1, col = "red")
abline(h= 130)
#hist(data$SUM, col = "red", breaks = 50)
model <- lm(data$SUM ~ data$A1, data)
abline(model, lwd = 2)
abline(v = median(data$SUM), col = "blue", lwd = 4)
rug(data$SUM)
boxplot(data$A1, col = "green")
abline(h= 4)
hist(data$A1, col = "green")
rug(data$A1)
ggplot(data=data, aes(x=D, y=data$SUM, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$SUM), size=5)
ggplot(data=data, aes(x=D, y=data$A1, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$A1), size=5)
quantile(data$SUM)
tt <- table(data$SUM)
tk <- table(tt)
tt
tk
class(tt)
str(tt)
dim(tt)
range(tt)
hcl <- hclust(dist(tt))  # clustering
plot(hcl)
median(tt)
quantile(tt, probs = c(0.2, 0.75, 1))
quantile(data$SSM)
st <- table(data$SSM)
sk <- table(st)
st
sk
hcs <- hclust(dist(st))  # clustering
plot(hcs)
ls()
rm(list=ls())
#library(tseries)
library(ggplot2)
library(reshape2)
data <- read.csv("~/Data/lua-workspace/luckynumbers/swlt_2015.csv",
colClasses=c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"),
sep=" ", comment.char = "#", header = FALSE)
#View(data)
head(data)
#numbers <- data[,c(2,3,4,5,6,7)]
#NN	YYYY-MM-DD	N1	N2	N3	N4	N5	N6	A1	AVG	SUM	PRIME	CHNUM	EVEN	ODD	BGAVG	BG25	PATTERN	DF	B1	B2
data$AVG <- rowMeans(data[,2:7])
data$SUM <- rowSums(data[,2:7])
data$SSM <- apply(data[,2:7], 1, function(x) { x[6] - x[5] +  x[5] - x[4] + x[4] - x[3] + x[3] - x[2] + x[2] - x[1]} )
data$SD <- apply(data[,2:7], 1, sd )
colnames(data) <- c("D", "N1", "N2", "N3", "N4", "N5", "N6", "A1", "AVG", "SUM", "SSM", "SD")
head(data)
data$D <- as.Date(data$D, format="%Y-%m-%d")
s <- data[c("D", "A1", "SUM")]
s <- s[order(s$D),]
str(data)
plot(x = data$D, y = data$SUM, col=data$A1)
# ---------------------------------------------------------------------------------
df <- data[1:10,]
ggplot(df, aes(x = df$D, y = df$SUM)) +
geom_line(aes(y = df$SUM, col = "SUM"), pch = 19, size = 1, col = "steelblue", linetype = "dashed") +
geom_line(aes(y = df$SD, col = "SD"), pch = 19, size = 1, col = "dark green", linetype = "solid") +
geom_point(aes(y = df$SSM, col = "SSM"), pch = 19, size = 4, alpha = 0.75, col = "red", linetype = "dashed") +
geom_point(pch = 19, size = 4, alpha = 0.75, col = "steelblue")
ggplot(data=df, aes(x=D, y=SUM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
ggplot(data=df, aes(x=D, y=SSM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
# ---------------------------------------------------------------------------------
#boxplot(data$SUM ~ data$A1, col = "red")
abline(h= 130)
#hist(data$SUM, col = "red", breaks = 50)
model <- lm(data$SUM ~ data$A1, data)
abline(model, lwd = 2)
abline(v = median(data$SUM), col = "blue", lwd = 4)
rug(data$SUM)
boxplot(data$A1, col = "green")
abline(h= 4)
hist(data$A1, col = "green")
rug(data$A1)
ggplot(data=data, aes(x=D, y=data$SUM, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$SUM), size=5)
ggplot(data=data, aes(x=D, y=data$A1, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$A1), size=5)
quantile(data$SUM)
tt <- table(data$SUM)
tk <- table(tt)
tt
tk
class(tt)
str(tt)
dim(tt)
range(tt)
hcl <- hclust(dist(tt))  # clustering
plot(hcl)
median(tt)
quantile(tt, probs = c(0.2, 0.75, 1))
quantile(data$SSM)
st <- table(data$SSM)
sk <- table(st)
st
sk
hcs <- hclust(dist(st))  # clustering
plot(hcs)
ls()
rm(list=ls())
#library(tseries)
library(ggplot2)
library(reshape2)
data <- read.csv("~/Data/lua-workspace/luckynumbers/swlt_2015.csv",
colClasses=c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"),
sep=" ", comment.char = "#", header = FALSE)
#View(data)
head(data)
#numbers <- data[,c(2,3,4,5,6,7)]
#NN	YYYY-MM-DD	N1	N2	N3	N4	N5	N6	A1	AVG	SUM	PRIME	CHNUM	EVEN	ODD	BGAVG	BG25	PATTERN	DF	B1	B2
data$AVG <- rowMeans(data[,2:7])
data$SUM <- rowSums(data[,2:7])
data$SSM <- apply(data[,2:7], 1, function(x) { x[6] - x[5] +  x[5] - x[4] + x[4] - x[3] + x[3] - x[2] + x[2] - x[1]} )
data$SD <- apply(data[,2:7], 1, sd )
colnames(data) <- c("D", "N1", "N2", "N3", "N4", "N5", "N6", "A1", "AVG", "SUM", "SSM", "SD")
head(data)
data$D <- as.Date(data$D, format="%Y-%m-%d")
s <- data[c("D", "A1", "SUM")]
s <- s[order(s$D),]
str(data)
plot(x = data$D, y = data$SUM, col=data$A1)
# ---------------------------------------------------------------------------------
df <- data[1:10,]
ggplot(df, aes(x = df$D, y = df$SUM)) +
geom_line(aes(y = df$SUM, col = "SUM"), pch = 19, size = 1, col = "steelblue", linetype = "dashed") +
geom_line(aes(y = df$SD, col = "SD"), pch = 19, size = 1, col = "dark green", linetype = "solid") +
geom_point(aes(y = df$SSM, col = "SSM"), pch = 19, size = 4, alpha = 0.75, col = "red", linetype = "dashed") +
geom_point(pch = 19, size = 4, alpha = 0.75, col = "steelblue")
ggplot(data=df, aes(x=D, y=SUM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
ggplot(data=df, aes(x=D, y=SSM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
# ---------------------------------------------------------------------------------
#boxplot(data$SUM ~ data$A1, col = "red")
abline(h= 130)
#hist(data$SUM, col = "red", breaks = 50)
model <- lm(data$SUM ~ data$A1, data)
abline(model, lwd = 2)
abline(v = median(data$SUM), col = "blue", lwd = 4)
rug(data$SUM)
boxplot(data$A1, col = "green")
abline(h= 4)
hist(data$A1, col = "green")
rug(data$A1)
ggplot(data=data, aes(x=D, y=data$SUM, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$SUM), size=5)
ggplot(data=data, aes(x=D, y=data$A1, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$A1), size=5)
quantile(data$SUM)
tt <- table(data$SUM)
tk <- table(tt)
tt
tk
class(tt)
str(tt)
dim(tt)
range(tt)
hcl <- hclust(dist(tt))  # clustering
plot(hcl)
median(tt)
quantile(tt, probs = c(0.2, 0.75, 1))
quantile(data$SSM)
st <- table(data$SSM)
sk <- table(st)
st
sk
hcs <- hclust(dist(st))  # clustering
plot(hcs)
# ------------------------------------------------------------------------------
d = ts(data=s[c(2,3)])
plot(d)
qplot(data = data, x = data$SUM)  + scale_x_continuous(limits = c(21, 237)) + geom_histogram(binwidth = 20, color = 'black', fill = '#006400')
mf = meanf(d[,2],h=12,level=c(90,95),fan=FALSE,lambda=NULL)
plot(mf)
mn = naive(d[,2],h=12,level=c(90,95),fan=FALSE,lambda=NULL)
plot(mn)
md = rwf(d[,2],h=12,drift=T,level=c(90,95),fan=FALSE,lambda=NULL)
plot(md)
fit <- ets(d[,2], model = "ANN")
fit
forecast(fit, 1)
plot(forecast(fit, 1))
as.POSIXlt(x = "2014-01-01", origin="2014-01-01")$yday
d.ts = ts(d, freq=106, start=c(2014, 0))
plot(d.ts)
r <- apply(numbers, 1, function(x) sum(x))
r
class(r)
plot(r)
s <- sapply(numbers, sum)
s
library(forecast)
forecast(data$sum, 10)
ls()
rm(list=ls())
#library(tseries)
library(ggplot2)
library(reshape2)
data <- read.csv("~/Data/lua-workspace/luckynumbers/swlt_2015.csv",
colClasses=c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"),
sep=" ", comment.char = "#", header = FALSE)
#View(data)
head(data)
#numbers <- data[,c(2,3,4,5,6,7)]
#NN	YYYY-MM-DD	N1	N2	N3	N4	N5	N6	A1	AVG	SUM	PRIME	CHNUM	EVEN	ODD	BGAVG	BG25	PATTERN	DF	B1	B2
data$AVG <- rowMeans(data[,2:7])
data$SUM <- rowSums(data[,2:7])
data$SSM <- apply(data[,2:7], 1, function(x) { x[6] - x[5] +  x[5] - x[4] + x[4] - x[3] + x[3] - x[2] + x[2] - x[1]} )
data$SD <- apply(data[,2:7], 1, sd )
colnames(data) <- c("D", "N1", "N2", "N3", "N4", "N5", "N6", "A1", "AVG", "SUM", "SSM", "SD")
head(data)
data$D <- as.Date(data$D, format="%Y-%m-%d")
s <- data[c("D", "A1", "SUM")]
s <- s[order(s$D),]
str(data)
plot(x = data$D, y = data$SUM, col=data$A1)
# ---------------------------------------------------------------------------------
df <- data[1:10,]
ggplot(df, aes(x = df$D, y = df$SUM)) +
geom_line(aes(y = df$SUM, col = "SUM"), pch = 19, size = 1, col = "steelblue", linetype = "dashed") +
geom_line(aes(y = df$SD, col = "SD"), pch = 19, size = 1, col = "dark green", linetype = "solid") +
geom_point(aes(y = df$SSM, col = "SSM"), pch = 19, size = 4, alpha = 0.75, col = "red", linetype = "dashed") +
geom_point(pch = 19, size = 4, alpha = 0.75, col = "steelblue")
ggplot(data=df, aes(x=D, y=SUM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
ggplot(data=df, aes(x=D, y=SSM)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal() # + coord_flip()
# ---------------------------------------------------------------------------------
#boxplot(data$SUM ~ data$A1, col = "red")
abline(h= 130)
#hist(data$SUM, col = "red", breaks = 50)
model <- lm(data$SUM ~ data$A1, data)
abline(model, lwd = 2)
abline(v = median(data$SUM), col = "blue", lwd = 4)
rug(data$SUM)
boxplot(data$A1, col = "green")
abline(h= 4)
hist(data$A1, col = "green")
rug(data$A1)
ggplot(data=data, aes(x=D, y=data$SUM, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$SUM), size=5)
ggplot(data=data, aes(x=D, y=data$A1, group=1)) + geom_line() + geom_point() + geom_text(aes(label=data$A1), size=5)
quantile(data$SUM)
tt <- table(data$SUM)
tk <- table(tt)
tt
tk
class(tt)
str(tt)
dim(tt)
range(tt)
hcl <- hclust(dist(tt))  # clustering
plot(hcl)
median(tt)
quantile(tt, probs = c(0.2, 0.75, 1))
quantile(data$SSM)
st <- table(data$SSM)
sk <- table(st)
st
sk
hcs <- hclust(dist(st))  # clustering
plot(hcs)
# ------------------------------------------------------------------------------
install.packages("rJava")
install.packages("rJava")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
install.packages("OpenStreetMap")
library(OpenStreetMap)
library(lubridate)
shift.vec <- function (vec, shift) {
if(length(vec) <= abs(shift)) {
rep(NA ,length(vec))
}else{
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift))) } } }
setwd("/home/david/Data/Sherlock/r-sherlock")
pfile <- htmlTreeParse("run.gpx", error = function (...) {}, useInternalNodes = T)
library(XML)
setwd("/home/david/Data/Sherlock/r-sherlock")
# ERROR: dependencies ‘rJava’, ‘rgdal’ are not available for package ‘OpenStreetMap’
# install.packages("OpenStreetMap")
library(OpenStreetMap)
library(lubridate)
shift.vec <- function (vec, shift) {
if(length(vec) <= abs(shift)) {
rep(NA ,length(vec))
}else{
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift))) } } }
# Parse the GPX file
pfile <- htmlTreeParse("run.gpx", error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
head(geodf)
geodf$lat.p1 <- shift.vec(geodf$lat, -1)
geodf$lon.p1 <- shift.vec(geodf$lon, -1)
# Calculate distances (in metres) using the function pointDistance from the ‘raster’ package.
# Parameter ‘lonlat’ has to be TRUE!
geodf$dist.to.prev <- apply(geodf, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T)
})
install.packages("raster")
install.packages("raster")
library(raster)
geodf$dist.to.prev <- apply(geodf, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T)
})
# Transform the column ‘time’ so that R knows how to interpret it.
geodf$time <- strptime(geodf$time, format = "%Y-%m-%dT%H:%M:%OS")
# Shift the time vector, too.
geodf$time.p1 <- shift.vec(geodf$time, -1)
# Calculate the number of seconds between two positions.
geodf$time.diff.to.prev <- as.numeric(difftime(geodf$time.p1, geodf$time))
# Calculate metres per seconds, kilometres per hour and two LOWESS smoothers to get rid of some noise.
geodf$speed.m.per.sec <- geodf$dist.to.prev / geodf$time.diff.to.prev
geodf$speed.km.per.h <- geodf$speed.m.per.sec * 3.6
geodf$speed.km.per.h <- ifelse(is.na(geodf$speed.km.per.h), 0, geodf$speed.km.per.h)
geodf$lowess.speed <- lowess(geodf$speed.km.per.h, f = 0.2)$y
geodf$lowess.ele <- lowess(geodf$ele, f = 0.2)$y
plot(geodf$ele, type = "l", bty = "n", xaxt = "n", ylab = "Elevation", xlab = "", col = "grey40")
lines(geodf$lowess.ele, col = "red", lwd = 3)
legend(x="bottomright", legend = c("GPS elevation", "LOWESS elevation"),
col = c("grey40", "red"), lwd = c(1,3), bty = "n")
# Plot speeds and smoother
plot(geodf$speed.km.per.h, type = "l", bty = "n", xaxt = "n", ylab = "Speed (km/h)", xlab = "",
col = "grey40")
lines(geodf$lowess.speed, col = "blue", lwd = 3)
legend(x="bottom", legend = c("GPS speed", "LOWESS speed"),
col = c("grey40", "blue"), lwd = c(1,3), bty = "n")
abline(h = mean(geodf$speed.km.per.h), lty = 2, col = "blue")
# Plot the track without any map, the shape of the track is already visible.
plot(rev(geodf$lon), rev(geodf$lat), type = "l", col = "red", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "osm")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
png("map1.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("red", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "bing")
transmap <- openproj(map, projection = "+proj=longlat")
png("map2.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("yellow", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "mapquest")
transmap <- openproj(map, projection = "+proj=longlat")
png("map3.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("yellow", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "skobbler")
transmap <- openproj(map, projection = "+proj=longlat")
png("map4.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("blue", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "esri-topo")
transmap <- openproj(map, projection = "+proj=longlat")
png("map5.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("blue", .5), lwd = 4)
#http://www.r-bloggers.com/stay-on-track-plotting-gps-tracks-with-r/
rm(list=ls())
library(XML)
# ERROR: dependencies ‘rJava’, ‘rgdal’ are not available for package ‘OpenStreetMap’
# install.packages("OpenStreetMap")
# install.packages("raster")
library(OpenStreetMap)
library(lubridate)
library(raster)
setwd("/home/david/Data/Sherlock/r-sherlock")
shift.vec <- function (vec, shift) {
if(length(vec) <= abs(shift)) {
rep(NA ,length(vec))
}else{
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift))) } } }
# Parse the GPX file
pfile <- htmlTreeParse("run.gpx", error = function (...) {}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
# Extract latitude and longitude from the coordinates
lats <- as.numeric(coords["lat",])
lons <- as.numeric(coords["lon",])
# Put everything in a dataframe and get rid of old variables
geodf <- data.frame(lat = lats, lon = lons, ele = elevations, time = times)
rm(list=c("elevations", "lats", "lons", "pfile", "times", "coords"))
head(geodf)
# Shift vectors for lat and lon so that each row also contains the next position.
geodf$lat.p1 <- shift.vec(geodf$lat, -1)
geodf$lon.p1 <- shift.vec(geodf$lon, -1)
# Calculate distances (in metres) using the function pointDistance from the ‘raster’ package.
# Parameter ‘lonlat’ has to be TRUE!
geodf$dist.to.prev <- apply(geodf, 1, FUN = function (row) {
pointDistance(c(as.numeric(row["lat.p1"]),
as.numeric(row["lon.p1"])),
c(as.numeric(row["lat"]), as.numeric(row["lon"])),
lonlat = T)
})
# Transform the column ‘time’ so that R knows how to interpret it.
geodf$time <- strptime(geodf$time, format = "%Y-%m-%dT%H:%M:%OS")
# Shift the time vector, too.
geodf$time.p1 <- shift.vec(geodf$time, -1)
# Calculate the number of seconds between two positions.
geodf$time.diff.to.prev <- as.numeric(difftime(geodf$time.p1, geodf$time))
# Calculate metres per seconds, kilometres per hour and two LOWESS smoothers to get rid of some noise.
geodf$speed.m.per.sec <- geodf$dist.to.prev / geodf$time.diff.to.prev
geodf$speed.km.per.h <- geodf$speed.m.per.sec * 3.6
geodf$speed.km.per.h <- ifelse(is.na(geodf$speed.km.per.h), 0, geodf$speed.km.per.h)
geodf$lowess.speed <- lowess(geodf$speed.km.per.h, f = 0.2)$y
geodf$lowess.ele <- lowess(geodf$ele, f = 0.2)$y
# Plot elevations and smoother
plot(geodf$ele, type = "l", bty = "n", xaxt = "n", ylab = "Elevation", xlab = "", col = "grey40")
lines(geodf$lowess.ele, col = "red", lwd = 3)
legend(x="bottomright", legend = c("GPS elevation", "LOWESS elevation"),
col = c("grey40", "red"), lwd = c(1,3), bty = "n")
# Plot speeds and smoother
plot(geodf$speed.km.per.h, type = "l", bty = "n", xaxt = "n", ylab = "Speed (km/h)", xlab = "",
col = "grey40")
lines(geodf$lowess.speed, col = "blue", lwd = 3)
legend(x="bottom", legend = c("GPS speed", "LOWESS speed"),
col = c("grey40", "blue"), lwd = c(1,3), bty = "n")
abline(h = mean(geodf$speed.km.per.h), lty = 2, col = "blue")
# Plot the track without any map, the shape of the track is already visible.
plot(rev(geodf$lon), rev(geodf$lat), type = "l", col = "red", lwd = 3, bty = "n", ylab = "Latitude", xlab = "Longitude")
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "osm")
transmap <- openproj(map, projection = "+proj=longlat")
# Now for plotting…
png("map1.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("red", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "bing")
transmap <- openproj(map, projection = "+proj=longlat")
png("map2.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("yellow", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "mapquest")
transmap <- openproj(map, projection = "+proj=longlat")
png("map3.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("yellow", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "skobbler")
transmap <- openproj(map, projection = "+proj=longlat")
png("map4.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("blue", .5), lwd = 4)
dev.off()
map <- openmap(as.numeric(c(max(geodf$lat), min(geodf$lon))),
as.numeric(c(min(geodf$lat), max(geodf$lon))), type = "esri-topo")
transmap <- openproj(map, projection = "+proj=longlat")
png("map5.png", width = 1000, height = 800, res = 100)
par(mar = rep(0,4))
plot(transmap, raster=T)
lines(geodf$lon, geodf$lat, type = "l", col = scales::alpha("blue", .5), lwd = 4)
dev.off()
